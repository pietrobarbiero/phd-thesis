

\usepackage{bbold}
\usepackage{mathtools} % Gives support for commands like \coloneqq, \fatsemi
\usepackage{hyperref}
\usepackage{cleveref}
\newcommand{\elena}[1]{\textcolor{purple}{(Elena: #1)}}

\crefname{definition}{Definition}{Definitions}
\crefname{theorem}{Theorem}{Theorems}
\crefname{lemma}{Lemma}{Lemmas}
\crefname{proposition}{Proposition}{Propositions}

\newcommand{\cat}[1]{\mathsf{#1}} % standard category name
\newcommand{\obj}[1]{#1_{obj}} % objects
\newcommand{\morphs}[1]{#1_{mor}} % morphisms
\newcommand{\fun}[1]{\mathbf{#1}} % standard functor name
\newcommand{\dcomp}{\mathbin{;}} % composition in diagrammatic order
\newcommand{\stream}[1]{\mathbb{#1}} % objects and morphisms of the category of streams
\newcommand{\Stream}[1]{\cat{Stream}_{#1}} % category of streams over a monoidal category
\newcommand{\id}[1]{\mathbb{1}_{#1}} % identity morphism
\newcommand{\proj}[1]{\pi_{#1}} % projections
\newcommand{\defn}{\coloneqq}
\newcommand{\Stoch}{\cat{Stoch}}
\newcommand{\Set}{\cat{Set}}
\newcommand{\cp}{\nu}
\newcommand{\discard}{\epsilon}
\newcommand{\swap}[1]{\sigma_{#1}}
\newcommand{\distr}{\fun{D}} % distribution monad
\newcommand{\given}{\mid}
\newcommand{\dirac}[1]{\delta_{#1}} % symbol for Dirac delta
\newcommand{\sto}{\nrightarrow} % symbol for stochastic channels
\newcommand{\st}{\ :\ } % such that
\newcommand{\Learn}[1]{\cat{Learn}_{#1}} % category of learning agents over a monoidal category
\newcommand{\XLearn}[1]{\cat{XLearn}_{#1}} % category of explainable learning agents over a monoidal category
\newcommand{\Vect}{\cat{Vec}}
\newcommand{\tensor}{\otimes} % monoidal product
\newcommand{\monoidalunit}{I} % monoidal unit
\newcommand{\iso}{\cong}
\newcommand{\fbk}[1][]{\circlearrowleft_{#1}}

%% figures
% figure cartesian streams composition
\newcommand{\cartesianStreamsCompositionFig}{
  \begin{tikzpicture}
    \pic(f1)at(0,0){morphismTwoOne=\(f_{n+1}\)};
    \pic(f0)at(0,-0.7){morphism=\(\hat{f}_{n}\)};
    \pic(c)at(-1,-0.4){comonoid};
    \draw[-](-1.5,|-f1-i1)node[aux,left]{\(X_{n+1}\)}to(f1-i1);
    \node[aux,left]at(c-i){\(X_{n}\times \cdots \times X_{0}\)};
    \node[aux,right]at(f1-o){\(Y_{n+1}\)};
    \node[aux,right]at(f0-o){\(Y_{n}\times \cdots \times Y_{0}\)};
  \end{tikzpicture}
}
% figure marginalisation property
\newcommand{\marginalisationPropertyFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0){morphismTwoTwo=\(f_{n+1}\)};
    \pic(d)at(0.8,0.1){counit};
    \draw[-](f1-o2)to(1,|-f1-o2);%node[aux,right]{\(Y_{n}\times \cdots \times Y_{0}\)};
%    \node[aux,above left]at(f1-i1){\(X_{n+1}\)};
%    \node[aux,below left]at(f1-i2){\(X_{n}\times \cdots \times X_{0}\)};
  \end{tikzpicture}
  =
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0){morphism=\(f_{n}\)};
    \pic(d)at(0,0.5){counit};
  %  \node[aux,left]at(d-i){\(X_{n+1}\)};
 %   \node[aux,left]at(f1-i){\(X_{n}\times \cdots \times X_{0}\)};
%    \node[aux,right]at(f1-o){\(Y_{n}\times \cdots \times Y_{0}\)};
  \end{tikzpicture}
}
%%%%%%%%%%% string diagrams %%%%%%%%%%%%%
% a morphism
\newcommand{\morphismFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f)at(0,0){morphism=\(f\)};
    \node[input]at(f-i){\(X\)};
    \node[output]at(f-o){\(Y\)};
  \end{tikzpicture}
}
% a morphism with many inputs and many outputs
\newcommand{\morphismManyWiresFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f)at(0,0){morphismThreeTwo=\(h\)};
    \node[input]at(f-i1){\(X_{1}\)};
    \node[input]at(f-i2){\(X_{2}\)};
    \node[input]at(f-i3){\(X_{3}\)};
    \node[output]at(f-o1){\(Y_{1}\)};
    \node[output]at(f-o2){\(Y_{2}\)};
  \end{tikzpicture}
}
% sequential composition
\newcommand{\sequentialFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(-1,0){morphism=\(f\)};
    \pic(g1)at(0,|-f1-i){morphism=\(g\)};
    \node[input]at(f1-i){\(X\)};
    \node[output]at(g1-o){\(Z\)};
  \end{tikzpicture}
}
% parallel composition
\newcommand{\parallelFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphism=\(f_1\)};
    \pic(f2)at(0,-0.3){morphism=\(f_2\)};
    \node[input]at(f1-i){\(X_1\)};
    \node[output]at(f1-o){\(Y_1\)};
    \node[input]at(f2-i){\(X_2\)};
    \node[output]at(f2-o){\(Y_2\)};
  \end{tikzpicture}
}
% identity on X
\newcommand{\identityXFig}[1][X]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \draw[-](0,0)to(1,0);
    \node[input]at(0,0){\(X\)};
    \node[output]at(1,0){\(X\)};
  \end{tikzpicture}
}
% composition is unital
\newcommand{\compositionUnitalFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f)at(0,0){morphism=\(f\)};
    \node[input]at(f-i){\(X\)};
    \node[output](o)at(1,|-f-o){\(Y\)};
    \draw[-](f-o)to(o);
  \end{tikzpicture}
  =
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f)at(0,0){morphism=\(f\)};
    \node[input]at(f-i){\(X\)};
    \node[output]at(f-o){\(Y\)};
  \end{tikzpicture}
  =
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f)at(0,0){morphism=\(f\)};
    \node[input](i)at(-1,|-f-i){\(X\)};
    \node[output]at(f-o){\(Y\)};
    \draw[-](i)to(f-i);
  \end{tikzpicture}
}
% states and costates
\newcommand{\statemorphismFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(s)at(0,0){state=\(s\)};
    \node[output]at(s-o){\(Y\)};
  \end{tikzpicture}
}
\newcommand{\costatemorphismFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(t)at(0,0){costate=\(t\)};
    \node[input]at(t-i){\(X\)};
  \end{tikzpicture}
}
% interchange law
\newcommand{\interchangeLawFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \coordinate(l1)at(0,0.3){};
    \coordinate(l2)at(0,-0.3){};
    \pic(f1)at(-1,|-l1){morphism=\(f\)};
    \pic(g1)at(0,|-l1){morphism=\(g\)};
    \pic(f2)at(-1,|-l2){morphism=\(f'\)};
    \pic(g2)at(0,|-l2){morphism=\(g'\)};
    \node[input]at(f1-i){\(X\)};
    \node[output]at(g1-o){\(Z\)};
    \node[input]at(f2-i){\(X'\)};
    \node[output]at(g2-o){\(Z'\)};
  \end{tikzpicture}
}
% symmetry
\newcommand{\swapXYFig}[2]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(s)at(0,0){swap};
    \node[input]at(s-i1){\(#1\)};
    \node[input]at(s-i2){\(#2\)};
    \node[output]at(s-o1){\(#2\)};
    \node[output]at(s-o2){\(#1\)};
  \end{tikzpicture}
}
% symmetry is its own inverse
\newcommand{\swapinverseFig}[2]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(s)at(0,0){swap};
    \pic(s1)at(1,|-s-c){swap};
    \node[input]at(s-i1){\(#1\)};
    \node[input]at(s-i2){\(#2\)};
    \node[output]at(s1-o1){\(#1\)};
    \node[output]at(s1-o2){\(#2\)};
  \end{tikzpicture}
  =
  \begin{tikzpicture}[baseline=-0.1cm]
    \node[input](i1)at(0,0.3){\(#1\)};
    \node[input](i2)at(0,-0.3){\(#2\)};
    \node[output](o1)at(1,|-i1){\(#1\)};
    \node[output](o2)at(1,|-i2){\(#2\)};
    \draw[-](i1)to(o1);
    \draw[-](i2)to(o2);
  \end{tikzpicture}
}
% one hexagon equation
\newcommand{\hexagoneqexampleFig}[3]{
  \swapXYFig{X \tensor{} Y}{Z} =
  \begin{tikzpicture}[baseline=0.2cm]
    \pic(s)at(0,0){swap};
    \pic(s1)at(1,0.6){swap};
    \node[input](i1)at(-0.5,|-s1-i1){\(#1\)};
    \node[input](i2)at(s-i1){\(#2\)};
    \node[input](i3)at(s-i2){\(#3\)};
    \node[output](o1)at(s1-o1){\(#3\)};
    \node[output](o2)at(s1-o2){\(#1\)};
    \node[output](o3)at(1.5,|-s-o2){\(#2\)};
    \draw[-](i1)to(s1-i1);
    \draw[-](s-o2)to(o3);
  \end{tikzpicture}
}
% swap is natural
\newcommand{\swapnaturalFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(s)at(0,0){swap};
    \pic(f)at(-1,|-s-i1){morphism=\(f\)};
    \pic(g)at(-1,|-s-i2){morphism=\(g\)};
    \node[input]at(f-i){\(X\)};
    \node[input]at(g-i){\(Z\)};
    \node[output]at(s-o1){\(W\)};
    \node[output]at(s-o2){\(Y\)};
  \end{tikzpicture}
  =
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(s)at(0,0){swap};
    \pic(f)at(1,|-s-o2){morphism=\(f\)};
    \pic(g)at(1,|-s-o1){morphism=\(g\)};
    \node[input]at(s-i1){\(X\)};
    \node[input]at(s-i2){\(Z\)};
    \node[output]at(g-o){\(W\)};
    \node[output]at(f-o){\(Y\)};
  \end{tikzpicture}
}
% cartesian structure: copy and discard
\newcommand{\copyXFig}[1][X]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){comonoid};
    \node[input]at(m-i){\(#1\)};
    \node[output]at(m-o1){\(#1\)};
    \node[output]at(m-o2){\(#1\)};
  \end{tikzpicture}
}
\newcommand{\discardXFig}[1][X]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){counit};
    \node[input]at(m-i){\(#1\)};
  \end{tikzpicture}
}
% naturality of copy and discard
\newcommand{\copynaturalFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){comonoid};
    \pic(f)at(-0.9,|-m-i){morphism=\(f\)};
    \node[input]at(f-i){\(X\)};
    \node[output]at(m-o1){\(Y\)};
    \node[output]at(m-o2){\(Y\)};
  \end{tikzpicture}
  &=
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){comonoid};
    \pic(f1)at(1,|-m-o1){morphism=\(f\)};
    \pic(f2)at(1,|-m-o2){morphism=\(f\)};
    \node[input]at(m-i){\(X\)};
    \node[output]at(f1-o){\(Y\)};
    \node[output]at(f2-o){\(Y\)};
  \end{tikzpicture}
}
\newcommand{\discardnaturalFig}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){counit};
    \pic(f)at(-0.9,|-m-i){morphism=\(f\)};
    \node[input]at(f-i){\(X\)};
  \end{tikzpicture}
  &= \discardXFig[Y]
}
% coherence of copy and discard
\newcommand{\copycoherentFig}[2]{
  \copyXFig[#1 \tensor{} #2] &=
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(c1)at(0,0.6){comonoid};
    \pic(c2)at(0,-0.6){comonoid};
    \pic(s)at(1,0){swap};
    \node[input]at(-0.5,|-c1-i){\(#1\)};
    \node[input]at(-0.5,|-c2-i){\(#2\)};
    \node(lo1)[output]at(1.5,|-c1-o1){\(#1\)};
    \node(lo2)[output]at(1.5,|-s-o1){\(#2\)};
    \node(lo3)[output]at(1.5,|-s-o2){\(#1\)};
    \node(lo4)[output]at(1.5,|-c2-o2){\(#2\)};
    \draw[-](c1-o1)to(lo1);
    \draw[-](c2-o2)to(lo4);
  \end{tikzpicture}
}
\newcommand{\discardcoherentFig}[2]{
  \discardXFig[#1 \tensor{} #2] &=
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0.3){counit};
    \pic(m1)at(0,-0.3){counit};
    \node[input]at(m-i){\(#1\)};
    \node[input]at(m1-i){\(#2\)};
  \end{tikzpicture}
}
% copy is counital
\newcommand{\copycounitalFig}[1][X]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){comonoid};
    \pic(u)at(1,|-m-o1){counit};
    \node[input]at(m-i){\(#1\)};
    \node[output](o)at(1.5,|-m2-o2){\(#1\)};
    \draw[-](m-o2)to(o);
  \end{tikzpicture}
  &=
  \identityXFig[#1]
}
% copy is coassociative
\newcommand{\copycoassociativeFig}[1][X]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m1)at(0,0){comonoid};
    \pic(m2)at(1,|-m1-o1){comonoid};
    \node[input](i)at(m1-i){\(#1\)};
    \node[output](o1)at(m2-o1){\(#1\)};
    \node[output](o2)at(m2-o2){\(#1\)};
    \node[output](o3)at(1.5,|-m1-o2){\(#1\)};
    \draw[-](m1-o2)to(o3);
  \end{tikzpicture}
  &=
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m1)at(0,0.3){comonoid};
    \pic(m2)at(1,|-m1-o2){comonoid};
    \node[input](i)at(m1-i){\(#1\)};
    \node[output](o1)at(1.5,|-m1-o1){\(#1\)};
    \node[output](o2)at(m2-o1){\(#1\)};
    \node[output](o3)at(m2-o2){\(#1\)};
    \draw[-](m1-o1)to(o1);
  \end{tikzpicture}
}
% copy is cocommutative
\newcommand{\copycocommutativeFig}[1][X]{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(m)at(0,0){comonoid};
    \pic(s)at(1,|-m-i){swap};
    \node[input]at(m-i){\(#1\)};
    \node[output]at(s-o1){\(#1\)};
    \node[output]at(s-o2){\(#1\)};
  \end{tikzpicture}
  &= \copyXFig[#1]
}



% learning agents
% model
\newcommand{\learnModel}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoOne=\(\hat{g}\)};
    \node[input]at(f1-i1){\(X\)};
    \node[input]at(f1-i2){\(P\)};
    \node[output]at(f1-o){\(Y\)};
  \end{tikzpicture}
}
% optimizer
\newcommand{\learnOptimizer}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismThreeOne=\(\nabla_Y\)};
    \node[input]at(f1-i1){\(Y\)};
    \node[input]at(f1-i2){\(Y\)};
    \node[input]at(f1-i3){\(P\)};
    \node[output]at(f1-o){\(P\)};
  \end{tikzpicture}
}
\newcommand{\learnOptimizerX}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismThreeOne=\(\nabla_Y\)};
    \node[input]at(f1-i1){\(Y\)};
    \node[input]at(f1-i2){\(Y\)};
    \node[input]at(f1-i3){\(P\)};
    \node[output]at(f1-o){\(P\)};
  \end{tikzpicture}
}
% learning agent
\newcommand{\learnCat}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0){morphismTwoOne=\(\hat{g}\)};
    \pic(g1)at(1.5,0.3){morphismThreeOne=\(\nabla_Y\)};
    \draw[-](f1-o)to(1,|-g1-i2);
    % \node[input]at(f1-i1){\(X\)};
    % \node[input]at(f1-i2){\(P\)};
    \node[output]at(g1-o){\(P\)};
    \draw[-](-1,.5)node[aux,left]{\(Y\)}to(g1-i1);
    \draw[-](-1,0.1)node[aux,left]{\(X\)}to(f1-i1);
    \draw[-](-1,-0.1)node[aux,left]{\(P\)};
    \node(-c)[dot, transform shape = false]at(-.7,-.1){};
    \draw[-](g1-o) to[out=-90,in=90] (2,-.5) to[out=-180,in=0] (-1,-.5) to[out=90,in=-90] (-1,-0.1) to[out=0,in=-180] (f1-i2);
    \draw[-](-.7,-.1) to[out=-90,in=90] (-.7,-.4) to[out=0,in=-180] (1,-.4) to[out=90,in=-90] (1,|-g1-i3);
    % \draw[-](0.6,0)to[out=90,in=-90](0.6,.8)to[out=0,in=-180](2,.8);
    % \node(-c)[dot, transform shape = false]at(0.6,-0.){};
    % \draw[-](2,.8)node[aux,right]{\(Y\)};
  \end{tikzpicture}
}
% explainer
\newcommand{\learnExplainer}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoTwo=\(\hat{f}\)};
    \node[input]at(f1-i1){\(X\)};
    % \node[input]at(f1-i2){\(P\)};
    \node[input]at(f1-i2){\(P\)};
    \node[output]at(f1-o1){\(Y\)};
    \node[output]at(f1-o2){\(E\)};
  \end{tikzpicture}
}
% optimizer of explanations
\newcommand{\learnOptimizerExplanations}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismThreeOne=\(\nabla_E\)};
    \node[input]at(f1-i1){\(E\)};
    \node[input]at(f1-i2){\(E\)};
    \node[input]at(f1-i3){\(P\)};
    \node[output]at(f1-o){\(P\)};
  \end{tikzpicture}
}
% translator
\newcommand{\learnTranslator}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphism=\(\tau\)};
    \node[input]at(f1-i){\(\mathcal{E}\)};
    \node[output]at(f1-o){\(Y\)};
  \end{tikzpicture}
}
% explainable learning agent (standard)
\newcommand{\xLearnCat}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0){morphismTwoTwo=\(\hat{f}\)};
    \pic(g1)at(1.5,0.3){morphismThreeOne=\(\nabla_{Y}\)};
    \draw[-](f1-o1)to(1,|-g1-i2);
    \node[output]at(g1-o){\(P\)};
    \node[output]at(f1-o2){\(E\)};
    \draw[-](-1,.5)node[aux,left]{\(Y\)}to(g1-i1);
    \draw[-](-1,0.1)node[aux,left]{\(X\)}to(f1-i1);
    \draw[-](-1,-0.1)node[aux,left]{\(P\)};
    \node(-c)[dot, transform shape = false]at(-.7,-.1){};
    \draw[-](g1-o) to[out=-90,in=90] (2,-.5) to[out=-180,in=0] (-1,-.5) to[out=90,in=-90] (-1,-0.1) to[out=0,in=-180] (f1-i2);
    \draw[-](-.7,-.1) to[out=-90,in=90] (-.7,-.4) to[out=0,in=-180] (1,-.4) to[out=90,in=-90] (1,|-g1-i3);
    % \draw[-](0.6,0.1)to[out=90,in=-90](0.6,.8)to[out=0,in=-180](2,.8);
    % \node(-c)[dot, transform shape = false]at(0.6,0.1){};
    % \draw[-](2,.8)node[aux,right]{\(Y\)};
    % \draw[-](0.4,-0.1)to[out=0,in=-180](2.1,-.1);
    % \draw[-](2.1,-.1)node[aux,right]{\(E\)};
  \end{tikzpicture}
}
% explainable learning agent (optimize explanations)
\newcommand{\xLearnCatExplanations}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0){morphismTwoTwo=\(\hat{f}\)};
    \pic(g1)at(1.5,0.3){morphismThreeOne=\(\nabla_E\)};
    \draw[-](f1-o2)to(1,|-g1-i2);
    \node[output]at(g1-o){\(P\)};
    \node[output]at(f1-o1){\(Y\)};
    % \node[output]at(f1-o2){\(E\)};
    \draw[-](-1,.5)node[aux,left]{\(E\)}to(g1-i1);
    \draw[-](-1,0.1)node[aux,left]{\(X\)}to(f1-i1);
    \draw[-](-1,-0.1)node[aux,left]{\(P\)};
    \node(-c)[dot, transform shape = false]at(-.7,-.1){};
    \draw[-](g1-o) to[out=-90,in=90] (2,-.5) to[out=-180,in=0] (-1,-.5) to[out=90,in=-90] (-1,-0.1) to[out=0,in=-180] (f1-i2);
    \draw[-](-.7,-.1) to[out=-90,in=90] (-.7,-.4) to[out=0,in=-180] (1,-.4) to[out=90,in=-90] (1,|-g1-i3);
    % \draw[-](0.5,0.1)to[out=90,in=-90](0.5,.8)to[out=0,in=-180](2,.8);
    % \node(-c)[dot, transform shape = false]at(0.6,-0.1){};
    % \draw[-](2,.8)node[aux,right]{\(Y\)};
    % \draw[-](0.4,-0.1)to[out=0,in=-180](2.1,-.1);
    % \draw[-](2.1,-.1)node[aux,right]{\(E\)};
  \end{tikzpicture}
}

% intrinsic explainer
\newcommand{\xaiIntrinsic}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoTwo=\(\hat{\eta}\)};
    \node[input]at(f1-i1){\(\mathcal{X}'\)};
    % \node[input]at(f1-i2){\(P\)};
    \node[input]at(f1-i2){\(\mathcal{P}'\)};
    \node[output]at(f1-o1){\(\mathcal{Y}'\)};
    \node[output]at(f1-o2){\(\mathcal{E}\)};
  \end{tikzpicture}
}
% post-hoc explainer
\newcommand{\xaiPosthoc}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoTwo=\(\hat{\eta}\)};
    \node[input]at(f1-i1){\( (\mathcal{Y}\times \mathcal{X} \times \mathcal{P}\))};
    % \node[input]at(f1-i2){\(P\)};
    \node[input]at(f1-i2){\(\mathcal{P}'\)};
    \node[output]at(f1-o1){\(\mathcal{Y}'\)};
    \node[output]at(f1-o2){\(\mathcal{E}\)};
  \end{tikzpicture}
}
% model-agnostic explainer
\newcommand{\xaiModelAgnostic}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoTwo=\(\hat{\eta}\)};
    \node[input]at(f1-i1){\( (\mathcal{X} \times \mathcal{Y}) \)};
    % \node[input]at(f1-i2){\(P\)};
    \node[input]at(f1-i2){\(\mathcal{P}'\)};
    \node[output]at(f1-o1){\(\mathcal{Y}'\)};
    \node[output]at(f1-o2){\(\mathcal{E}\)};
  \end{tikzpicture}
}
% forward-based explainer
\newcommand{\xaiForward}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoTwo=\(\hat{\eta}\)};
    \node[input]at(f1-i1){\( \mathcal{P} \)};
    % \node[input]at(f1-i2){\(P\)};
    \node[input]at(f1-i2){\(\mathcal{P}'\)};
    \node[output]at(f1-o1){\(\mathcal{Y}'\)};
    \node[output]at(f1-o2){\(\mathcal{E}\)};
  \end{tikzpicture}
}
% backward-based explainer
\newcommand{\xaiBackward}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0.3){morphismTwoTwo=\(\hat{\eta}\)};
    \node[input]at(f1-i1){\( \mathcal{P} \)};
    % \node[input]at(f1-i2){\(P\)};
    \node[input]at(f1-i2){\(\mathcal{P}'\)};
    \node[output]at(f1-o1){\(\mathcal{Y}'\)};
    \node[output]at(f1-o2){\(\mathcal{E}\)};
  \end{tikzpicture}
}

% concept bottleneck models
\newcommand{\xaiCBM}{
  \begin{tikzpicture}[baseline=-0.1cm]
    % concept encoder
    \pic(f1)at(0,0){morphismTwoOne=\(g\)};
    \pic(g1)at(1.5,0.3){morphismThreeOne=\(\nabla_{\mathcal{C}}\)};
    \draw[-](f1-o)to(1,|-g1-i2);
    \draw[-](-1,.5)node[aux,left]{\(\mathcal{C}\)}to(g1-i1);
    \draw[-](-1,0.1)node[aux,left]{\(\mathcal{X}\)}to(f1-i1);
    \draw[-](-1,-0.1)node[aux,left]{\(\mathcal{P}'\)};
    \node(-c)[dot, transform shape = false]at(-.7,-.1){};
    \draw[-](g1-o) to[out=-90,in=90] (2,-.5) to[out=-180,in=0] (-1,-.5) to[out=90,in=-90] (-1,-0.1) to[out=0,in=-180] (f1-i2);
    \draw[-](-.7,-.1) to[out=-90,in=90] (-.7,-.4) to[out=0,in=-180] (1,-.4) to[out=90,in=-90] (1,|-g1-i3);
    % label predictor
    \pic(f2)at(1.5,1.5){morphismTwoTwo=\(f\)};
    \pic(g2)at(3,1.8){morphismThreeOne=\(\nabla_{\mathcal{Y}}\)};
    \draw[-](f1-o)to(1.,|-f2-i1);
    \node(-c)[dot, transform shape = false]at(0.6,-0.){};
    \draw[-](f2-o1)to(2.5,|-g2-i2);
    % \node[input]at(f2-i1){\(X\)};
    \draw[-](-1,2)node[aux,left]{\(\mathcal{Y}\)}to(g2-i1);
    % \draw[-](-.5,2)node[aux,left]{\(\mathcal{Y}\)}to(g2-i1);
    \draw[-](-1,1.4)node[aux,left]{\(\mathcal{P}\)};
    \node[output]at(f2-o2){\(\mathcal{E}\)};
    % \node[output]at(g2-o){\(\mathcal{P}\)};
    % \node(-c)[dot, transform shape = false]at(2.5,1.){};
    % \draw[-](2.5,1.) to[out=90,in=-90] (2.5,|-g2-i3);
    % \draw[-](g2-o) to[out=-90,in=90] (3.5,1) to[out=-180,in=0] (1,1) to[out=90,in=-90] (1,|-f2-i2);
    \node(-c)[dot, transform shape = false]at(-.7,1.4){};
    \draw[-](g2-o) to[out=-90,in=90] (3.5,1) to[out=-180,in=0] (-1,1) to[out=90,in=-90] (-1,1.4) to[out=0,in=-180] (f2-i2);
    \draw[-](-.7,1.4) to[out=-90,in=90] (-.7,1.1) to[out=0,in=-180] (2.5,1.1) to[out=90,in=-90] (2.5,|-g2-i3);
  \end{tikzpicture}
}
% agreement
\newcommand{\xaiAgreement}{
  \begin{tikzpicture}[baseline=-0.1cm]
    \pic(f1)at(0,0){morphismTwoTwo=\(\hat{\eta}\)};
    \pic(g1)at(1.5,0.3){morphismThreeOne=\(\nabla_{E,\mathrm{T}}\)};
    \draw[-](f1-o2)to(1,|-g1-i2);
    \node[input]at(f1-i1){\(\mathcal{X}'\)};
    \node[input]at(f1-i2){\(\mathcal{P}'\)};
    \node[output]at(g1-o){\(\mathcal{P}'\)};
    \node[output]at(f1-o1){\(\mathcal{Y}\)};
    \draw[-](-.5,.5)node[aux,left]{\(\mathcal{E}\)}to(g1-i1);
    \node(-c)[dot, transform shape = false]at(1,-.5){};
    \draw[-](1,-.5) to[out=90,in=-90] (1,|-g1-i3);
    \draw[-](g1-o) to[out=-90,in=90] (2,-.5) to[out=-180,in=0] (-.5,-.5) to[out=90,in=-90] (-.5,|-f1-i2);
  \end{tikzpicture}
}

  % \begin{tikzpicture}[baseline=-0.1cm]
  %   \pic(f)at(0,0){morphism=\(f\)};
  %   \draw[-](f-o)to(1,|-f-o);
  %   \node[input]at(f-i){\(X\)};
  %   \node[output]at(1,|-f-o){\(Y\)};
  % \end{tikzpicture}

% \newcommand{\sequentialFig}{
%   \begin{tikzpicture}[baseline=-0.1cm]
%     \pic(f1)at(-1,0){morphism=\(f\)};
%     \pic(g1)at(0,|-f1-i){morphism=\(g\)};
%     \node[input]at(f1-i){\(X\)};
%     \node[output]at(g1-o){\(Z\)};
%   \end{tikzpicture}
% }

% \newcommand{\copyXFig}[1][X]{
%   \begin{tikzpicture}[baseline=-0.1cm]
%     \pic(m)at(0,0){comonoid};
%     \node[input]at(m-i){\(#1\)};
%     \node[output]at(m-o1){\(#1\)};
%     \node[output]at(m-o2){\(#1\)};
%   \end{tikzpicture}
% }

% figure cartesian streams composition
% \newcommand{\cartesianStreamsCompositionFig}{
%   \begin{tikzpicture}
%     \pic(f1)at(0,0){morphismTwoOne=\(f_{n+1}\)};
%     \pic(f0)at(0,-0.7){morphism=\(\hat{f}_{n}\)};
%     \pic(c)at(-1,-0.4){comonoid};
%     \draw[-](-1.5,|-f1-i1)node[aux,left]{\(X_{n+1}\)}to(f1-i1);
%     \node[aux,left]at(c-i){\(X_{n}\times \cdots \times X_{0}\)};
%     \node[aux,right]at(f1-o){\(Y_{n+1}\)};
%     \node[aux,right]at(f0-o){\(Y_{n}\times \cdots \times Y_{0}\)};
%   \end{tikzpicture}
% }